import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn import neighbors
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.ensemble import RandomForestClassifier

digit=load_digits()
print('digit dataset-keys{}'.format(digit.keys()))
print(' digit dataset-target_names{}'.format(digit['target_names']))
#there is no feature naems available
#print('digit dataset-feature names{}'.format(digit['feature_names']))
print('digit dataset-datas{}'.format(digit['data'][:1]))

#target values
print('iris dataset-target{}'.format(digit['target']))
X=digit.data
y=digit.target
print('shape of data set',np.shape(X))
print('shape of target set',np.shape(y))


fig = plt.figure(figsize=(6, 6)) # figure size in inches
fig.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05)
# plot the digits: each image is 8x8 pixels
for i in range(64):
    ax = fig.add_subplot(8, 8, i + 1, xticks=[], yticks=[])
    ax.imshow(digit.images[i], cmap=plt.cm.binary, interpolation='nearest')
# label the image with the target value
    ax.text(0, 7, str(digit.target[i]))


Xtrain, Xtest, ytrain, ytest = train_test_split(digit.data, digit.target,
random_state=0)
model = RandomForestClassifier(n_estimators=1000)
model.fit(Xtrain, ytrain)
ypred = model.predict(Xtest)

print('accurecy score of random forest classifier{}'.format(accuracy_score(ypred,ytest)))
